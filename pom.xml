<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.7</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>

	<groupId>me.crespel</groupId>
	<artifactId>karaplan</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>karaplan</name>
	<description>Karaoke Planner</description>

	<properties>
		<!-- Project properties -->
		<java.version>17</java.version>
		<start-class>me.crespel.karaplan.KaraplanApplication</start-class>
		<project.build.outputTimestamp>${git.commit.time}</project.build.outputTimestamp>
		<nodejs.src.directory>${basedir}/src/main/nodejs</nodejs.src.directory>
		<nodejs.build.directory>${project.build.directory}/nodejs</nodejs.build.directory>
		<docker.src.directory>${basedir}/src/main/docker</docker.src.directory>
		<docker.build.directory>${project.build.directory}/docker-build</docker.build.directory>
		<docker.app.directory>/opt/${project.artifactId}</docker.app.directory>
		<docker.image.prefix>ghcr.io/fcrespel</docker.image.prefix>
		<docker.image.repository>${docker.image.prefix}/${project.artifactId}</docker.image.repository>
		<docker.image.tag>${project.version}</docker.image.tag>
		<appengine.src.directory>${basedir}/src/main/appengine</appengine.src.directory>
		<appengine.build.directory>${project.build.directory}/appengine-build</appengine.build.directory>
		<appengine.staging.directory>${project.build.directory}/appengine-staging</appengine.staging.directory>
		<appengine.secret.prefix>karaplan</appengine.secret.prefix>

		<!-- Plugin properties -->
		<appengine-maven-plugin.version>2.8.1</appengine-maven-plugin.version>
		<dockerfile-maven-plugin.version>1.4.13</dockerfile-maven-plugin.version>
		<frontend-maven-plugin.version>1.15.1</frontend-maven-plugin.version>
		<jacoco-maven-plugin.version>0.8.12</jacoco-maven-plugin.version>

		<!-- Dependency properties -->
		<commons-csv.version>1.12.0</commons-csv.version>
		<guava.version>33.3.1-jre</guava.version>
		<opentelemetry-instrumentation.version>2.11.0</opentelemetry-instrumentation.version>
		<node.version>v20.18.0</node.version>
		<npm.version>10.9.0</npm.version>
		<socketio-client.version>1.0.1</socketio-client.version>
		<spring-cloud-gcp.version>5.9.0</spring-cloud-gcp.version>
		<springdoc.version>2.6.0</springdoc.version>
	</properties>

	<scm>
		<connection>scm:git:https://github.com/fcrespel/karaplan.git</connection>
		<developerConnection>scm:git:https://github.com/fcrespel/karaplan.git</developerConnection>
		<url>https://github.com/fcrespel/karaplan</url>
	</scm>

	<distributionManagement>
		<repository>
			<id>github</id>
			<name>GitHub Apache Maven Packages</name>
			<url>https://maven.pkg.github.com/fcrespel/karaplan</url>
		</repository>
	</distributionManagement>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>provided</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-oauth2-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>com.google.cloud</groupId>
			<artifactId>spring-cloud-gcp-starter-logging</artifactId>
		</dependency>
		<dependency>
			<groupId>com.google.cloud</groupId>
			<artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>
		</dependency>
		<dependency>
			<groupId>com.google.cloud</groupId>
			<artifactId>spring-cloud-gcp-starter-sql-mysql</artifactId>
		</dependency>
		<dependency>
			<groupId>com.google.cloud</groupId>
			<artifactId>spring-cloud-gcp-starter-sql-postgresql</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.session</groupId>
			<artifactId>spring-session-jdbc</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-websocket</artifactId>
		</dependency>

		<!-- Springdoc OpenAPI -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
		</dependency>

		<!-- OpenTelemetry -->
		<dependency>
			<groupId>io.opentelemetry.instrumentation</groupId>
			<artifactId>opentelemetry-spring-boot-starter</artifactId>
		</dependency>

		<!-- Utilities -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-csv</artifactId>
		</dependency>
		<dependency>
			<groupId>org.ehcache</groupId>
			<artifactId>ehcache</artifactId>
			<classifier>jakarta</classifier>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents.client5</groupId>
			<artifactId>httpclient5</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-hibernate6</artifactId>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>io.socket</groupId>
			<artifactId>socket.io-client</artifactId>
		</dependency>

		<!-- Databases -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
		</dependency>
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
		</dependency>

		<!-- Tests -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>io.opentelemetry.instrumentation</groupId>
				<artifactId>opentelemetry-instrumentation-bom</artifactId>
				<version>${opentelemetry-instrumentation.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-csv</artifactId>
				<version>${commons-csv.version}</version>
			</dependency>
			<dependency>
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>${guava.version}</version>
			</dependency>
			<dependency>
				<groupId>io.socket</groupId>
				<artifactId>socket.io-client</artifactId>
				<version>${socketio-client.version}</version>
			</dependency>
			<dependency>
				<groupId>com.google.cloud</groupId>
				<artifactId>spring-cloud-gcp-dependencies</artifactId>
				<version>${spring-cloud-gcp.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springdoc</groupId>
				<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
				<version>${springdoc.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>build-info</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>io.github.git-commit-id</groupId>
				<artifactId>git-commit-id-maven-plugin</artifactId>
				<configuration>
					<failOnNoGitDirectory>false</failOnNoGitDirectory>
					<dateFormatTimeZone>UTC</dateFormatTimeZone>
					<excludeProperties>
						<excludeProperty>git.build.*</excludeProperty>
						<excludeProperty>git.commit.user.*</excludeProperty>
					</excludeProperties>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.cyclonedx</groupId>
				<artifactId>cyclonedx-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco-maven-plugin.version}</version>
				<executions>
					<execution>
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>default-prepare-agent-integration</id>
						<goals>
							<goal>prepare-agent-integration</goal>
						</goals>
					</execution>
					<execution>
						<id>default-report</id>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<formats>
								<format>XML</format>
							</formats>
						</configuration>
					</execution>
					<execution>
						<id>default-report-integration</id>
						<goals>
							<goal>report-integration</goal>
						</goals>
						<configuration>
							<formats>
								<format>XML</format>
							</formats>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>frontend-build</id>
			<activation>
				<property>
					<name>frontend-build</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<executions>
							<execution>
								<id>generate-nodejs-sources</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${nodejs.build.directory}</outputDirectory>
									<resources>
										<resource>
											<directory>${nodejs.src.directory}</directory>
											<filtering>false</filtering>
											<excludes>
												<exclude>dist/**</exclude>
												<exclude>node/**</exclude>
												<exclude>node_modules/**</exclude>
												<exclude>tmp/**</exclude>
											</excludes>
										</resource>
									</resources>
								</configuration>
							</execution>
							<execution>
								<id>process-nodejs-resources</id>
								<phase>process-resources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.build.outputDirectory}</outputDirectory>
									<resources>
										<resource>
											<directory>${nodejs.build.directory}/dist/karaplan/browser</directory>
											<targetPath>static</targetPath>
											<filtering>false</filtering>
											<excludes>
												<exclude>index.html</exclude>
											</excludes>
										</resource>
										<resource>
											<directory>${nodejs.build.directory}/dist/karaplan/browser</directory>
											<targetPath>templates</targetPath>
											<filtering>false</filtering>
											<includes>
												<include>index.html</include>
											</includes>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<version>${frontend-maven-plugin.version}</version>
						<configuration>
							<nodeVersion>${node.version}</nodeVersion>
							<npmVersion>${npm.version}</npmVersion>
							<workingDirectory>${nodejs.build.directory}</workingDirectory>
						</configuration>
						<executions>
							<execution>
								<id>install-node-and-npm</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>install-node-and-npm</goal>
								</goals>
							</execution>
							<execution>
								<id>npm-install</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>npm</goal>
								</goals>
								<configuration>
									<arguments>install</arguments>
								</configuration>
							</execution>
							<execution>
								<id>npm-run-build</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>npm</goal>
								</goals>
								<configuration>
									<arguments>run build</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>docker-build</id>
			<activation>
				<property>
					<name>docker-build</name>
				</property>
			</activation>
			<build>
				<defaultGoal>package</defaultGoal>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>docker-unpack</id>
								<phase>package</phase>
								<goals>
									<goal>unpack</goal>
								</goals>
								<configuration>
									<outputDirectory>${docker.build.directory}</outputDirectory>
									<artifactItems>
										<artifactItem>
											<groupId>${project.groupId}</groupId>
											<artifactId>${project.artifactId}</artifactId>
											<version>${project.version}</version>
											<type>${project.packaging}</type>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<executions>
							<execution>
								<id>docker-resources</id>
								<phase>package</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${docker.build.directory}</outputDirectory>
									<resources>
										<resource>
											<directory>${docker.src.directory}</directory>
											<filtering>true</filtering>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>com.spotify</groupId>
						<artifactId>dockerfile-maven-plugin</artifactId>
						<version>${dockerfile-maven-plugin.version}</version>
						<configuration>
							<repository>${docker.image.repository}</repository>
							<tag>${docker.image.tag}</tag>
							<contextDirectory>${docker.build.directory}</contextDirectory>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>appengine-build</id>
			<activation>
				<property>
					<name>appengine-build</name>
				</property>
			</activation>
			<dependencies>
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-tomcat</artifactId>
					<!-- Force inclusion in classpath -->
				</dependency>
			</dependencies>
			<build>
				<defaultGoal>package</defaultGoal>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jar-plugin</artifactId>
						<executions>
							<execution>
								<id>appengine-thin-jar</id>
								<phase>package</phase>
								<goals>
									<goal>jar</goal>
								</goals>
								<configuration>
									<classifier>thin</classifier>
									<archive>
										<manifest>
											<addClasspath>true</addClasspath>
											<classpathPrefix>WEB-INF/lib/</classpathPrefix>
											<useUniqueVersions>false</useUniqueVersions>
										</manifest>
									</archive>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>appengine-unpack</id>
								<phase>package</phase>
								<goals>
									<goal>unpack</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<outputDirectory>${appengine.staging.directory}</outputDirectory>
											<groupId>${project.groupId}</groupId>
											<artifactId>${project.artifactId}</artifactId>
											<version>${project.version}</version>
											<type>${project.packaging}</type>
											<includes>WEB-INF/classes/static/**</includes>
										</artifactItem>
										<artifactItem>
											<outputDirectory>${project.build.directory}</outputDirectory>
											<groupId>${project.groupId}</groupId>
											<artifactId>${project.artifactId}</artifactId>
											<version>${project.version}</version>
											<type>${project.packaging}</type>
											<includes>WEB-INF/lib/**</includes>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<executions>
							<execution>
								<id>appengine-resources</id>
								<phase>package</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${appengine.build.directory}</outputDirectory>
									<resources>
										<resource>
											<directory>${appengine.src.directory}</directory>
											<filtering>true</filtering>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>com.google.cloud.tools</groupId>
						<artifactId>appengine-maven-plugin</artifactId>
						<version>${appengine-maven-plugin.version}</version>
						<executions>
							<execution>
								<id>appengine-stage</id>
								<phase>package</phase>
								<goals>
									<goal>stage</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<appEngineDirectory>${appengine.build.directory}</appEngineDirectory>
							<artifact>${project.build.directory}/${project.build.finalName}-thin.jar</artifact>
							<version>GCLOUD_CONFIG</version>
							<projectId>GCLOUD_CONFIG</projectId>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
